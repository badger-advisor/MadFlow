import { isNode, isEdge, removeElements, addEdge } from 'react-flow-renderer';
import { getCourse, updateUserFlowElements } from './api';

class Exception {
  /**
   * Custom exception class
   * @param {String} name Error to throw
   * @param {String} message Extra info to return
   */
  constructor(name, message = '') {
    this.name = name;
    this.message = message;
  }
}

/**
 * Genereates a Node from raw course data
 * @param {Object} courseData The exact course object retrieved from the DB
 * @throws InvalidCourseNum
 * @returns a Node object ready to be inserted to the Flow
 */
export const generateNode = async (courseNum, options) => {
  const courseData = (await getCourse(courseNum)).data;
  if (!courseData) {
    throw new Exception('InvalidCourseNum', courseNum);
  }

  const { info, courseNumber, prerequisites } = courseData;

  return {
    id       : courseNumber,
    position : { x: 0, y: 0 },
    type     : options.type,
    data     : { label: courseNumber, prerequisites, ...info }
  };
};

/**
 * Function to call each time to save the current state of the flow's elements
 * @param {String} flowID the autogenerated id from mongodb for each flow
 * @param {[Object]} elements Elements array containing all nodes and edges
 */
export const autosave = async (flowID, elements) => {
  // TODO: need to check valid input
  await updateUserFlowElements(flowID, elements);
};

/**
 * Adds edges between a course node and its prereqs (if they exist in the graph)
 * @param {object} node A node that represents a course in the graph
 * @param {[Object]} elements Elements array containing all nodes and edges
 */
export const connectPrereqs = (node, elements) => {
  //TODO: create different edge types depending on the status of the node
  //Get id and prereqs for the course that is being added
  const newId = node.id;
  const prereqs = node['data'].prerequisites;

  //Naive approach: check each element in the graph to see if its id matches the prereq ids
  elements.map(el => {
    //If there is a match, create a new edge between these elements and push it to the elements list
    if (prereqs.includes(el.id)) {
      const newEdge = {
        id            : el.id + '-' + newId,
        source        : el.id,
        target        : newId,
        type          : 'smoothstep',
        animated      : 'true',
        arrowHeadType : 'arrowclosed'
      };
      elements.push(newEdge); //Add the new edge to the list
    }
  });
  return elements;
};
