import { isNode, isEdge, removeElements, addEdge } from 'react-flow-renderer';
<<<<<<< HEAD
import { getCourse,deleteUser } from './api';
=======
import { getCourse, updateUserFlowElements, updateUserFlow, createUserFlow } from './api';
>>>>>>> dev

class Exception {
  /**
   * Custom exception class
   * @param {String} name Error to throw
   * @param {String} message Extra info to return
   */
  constructor(name, message = '') {
    this.name = name;
    this.message = message;
  }
}

/**
 * Genereates a Node from raw course data
 * @param {Object} courseData The exact course object retrieved from the DB
 * @throws InvalidCourseNum
 * @returns a Node object ready to be inserted to the Flow
 */
export const generateNode = async (courseNum, options) => {
  const courseData = (await getCourse(courseNum)).data;
  if (!courseData) {
    throw new Exception('InvalidCourseNum', courseNum);
  }

  const { info, courseNumber, prerequisites } = courseData;

  return {
    id       : courseNumber,
    position : { x: 0, y: 0 },
    type     : options.type,
    data     : { label: courseNumber, prerequisites, ...info }
  };
};

<<<<<<< HEAD
export const deleteUserObj= async(UserID)=> {
  await deleteUser(UserID);
}
=======
/**
 * Function to call each time to save the current state of the flow's elements
 * @param {String} flowID the autogenerated id from mongodb for each flow
 * @param {[Object]} elements Elements array containing all nodes and edges
 */
export const autosave = async (flowID, elements) => {
  // TODO: need to check valid input
  await updateUserFlowElements(flowID, elements);
};

/**
 * Function to call to update a flows information
 * @param {String} flowID the autogenerated id from mongodb for each flow
 * @param {{Object}} changes in the json form
 */
export const updateFlow = async (flowID, changes) => {
  await updateUserFlow(flowID, changes);
};

/**
 * Function to call to create new flow
 * @param {String} userID user's googleId
 * @param {String} name name of the flow
 * @param {String} major major of the flow
 */
export const createNewFlow = async (userID, name, major) => {
  await createUserFlow(userID, name, major);
};
>>>>>>> dev
